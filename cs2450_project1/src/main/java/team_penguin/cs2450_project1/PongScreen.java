 package team_penguin.cs2450_project1;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import java.awt.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class PongScreen extends javax.swing.JFrame {
    
    PongPanel gamePanel;
    Rectangle panelSize = new Rectangle(0, 0, PongPanel.WIDTH, PongPanel.HEIGHT);
    private int score1;
    private int score2;
    private boolean startFlag;
    private boolean exitFlag;
    
    public PongScreen() {
        
        initComponents();
        setSize(600,400);
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("Pong Game");
        keybindings();
        
        score1 = 0;
        score2 = 0;
        startFlag = false;
        exitFlag = false;
        
        showDate();
        showTime();
        
        gamePanel = new PongPanel();
        gamePanel.setLocation(120, 70);
        gamePanel.setBackground(Color.black);
        
        getContentPane().add(gamePanel);
        
    }
    
    void showDate(){
        Date d = new Date();
        SimpleDateFormat f = new SimpleDateFormat("MMMM dd, yyyy");
        Date.setText(f.format(d));
    }
    
    void showTime(){
        new Timer(0, new ActionListener(){
            
            @Override
            public void actionPerformed(ActionEvent e) {
               Date d = new Date();
               SimpleDateFormat f = new SimpleDateFormat("hh:mm:ss a");
               Time.setText(f.format(d));
            }
        }).start();
    }
    
    private void updateScore()
    {
        this.score_player1.setText(Integer.toString(score1));
        this.score_player2.setText(Integer.toString(score2));
        
        if(score1 >= 100)
        {
            setExitFlag(true);
            PongEndScreen ms = new PongEndScreen("Player 1");
            ms.setVisible(true);
            dispose();
        }
        else if(score2 >= 100)
        {
            setExitFlag(true);
            PongEndScreen ms = new PongEndScreen("Player 2");
            ms.setVisible(true);
            dispose();
        }
    }
    private void setStartFlag(boolean b)
    {
        this.startFlag = b;
        if(b == true)
        {
            message.setVisible(false);
        }
        else
        {
            message.setVisible(true);
        }
    }
    private void setExitFlag(boolean b)
    {
        this.exitFlag = b;
    }
    
    //Implementaion of esc key to exit program and f1 to pop out display. 
    public void keybindings(){
        Action exit = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                System.exit(0);
            }
        };
            String WindowClose = "exit";
            getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("ESCAPE"), WindowClose); 
            getRootPane().getActionMap().put(WindowClose, exit);

        
            Action dm = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                    ProjectInfo dm = new ProjectInfo();
                    dm.setVisible(true);
                    dispose();
                }
            };
            String PopMenu = "dm";
            getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("F1"),PopMenu); 
            getRootPane().getActionMap().put(PopMenu,dm);
            
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        Date = new javax.swing.JLabel();
        Time = new javax.swing.JLabel();
        Quit = new javax.swing.JButton();
        score_player1 = new javax.swing.JLabel();
        score_player2 = new javax.swing.JLabel();
        title1 = new javax.swing.JLabel();
        title2 = new javax.swing.JLabel();
        message = new javax.swing.JLabel();

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        Title.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        Title.setForeground(new java.awt.Color(0, 153, 153));
        Title.setText("PONG");
        Title.setToolTipText("game title");
        getContentPane().add(Title);
        Title.setBounds(30, 20, 70, 25);

        Date.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        Date.setText("Date");
        Date.setToolTipText("current date");
        getContentPane().add(Date);
        Date.setBounds(230, 20, 144, 19);

        Time.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        Time.setText("Time");
        Time.setToolTipText("current time");
        getContentPane().add(Time);
        Time.setBounds(410, 20, 142, 20);

        Quit.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        Quit.setText("Quit");
        Quit.setToolTipText("Go back to Menu");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });
        getContentPane().add(Quit);
        Quit.setBounds(480, 300, 91, 33);

        score_player1.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        score_player1.setToolTipText("player 2 score");
        getContentPane().add(score_player1);
        score_player1.setBounds(500, 140, 40, 40);

        score_player2.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        score_player2.setToolTipText("player 1 score");
        getContentPane().add(score_player2);
        score_player2.setBounds(40, 140, 40, 40);

        title1.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        title1.setText("Player2");
        title1.setToolTipText("Player 2");
        getContentPane().add(title1);
        title1.setBounds(500, 120, 70, 20);

        title2.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        title2.setText("Player1");
        title2.setToolTipText("Player 1");
        getContentPane().add(title2);
        title2.setBounds(40, 120, 80, 20);

        message.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        message.setForeground(new java.awt.Color(255, 51, 51));
        message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        message.setText("Press Space to Start!");
        message.setToolTipText("start pong game message");
        getContentPane().add(message);
        message.setBounds(180, 50, 220, 14);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        MenuScreen menuScreen = new MenuScreen();
        menuScreen.setVisible(true);
        dispose();
    }//GEN-LAST:event_QuitActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PongScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PongScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PongScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PongScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PongScreen().setVisible(true);
//            }
//        });  
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JLabel Date;
    private javax.swing.JButton Quit;
    private javax.swing.JLabel Time;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel message;
    private javax.swing.JLabel score_player1;
    private javax.swing.JLabel score_player2;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel title2;
    // End of variables declaration//GEN-END:variables

    private class PongPanel extends JPanel implements Runnable{
        
        private static final int WIDTH = 350;
        private static final int HEIGHT = 250;
        private static final int PADDLE_WIDTH = 5;
        private static final int PADDLE_HEIGHT = 50;
        private static final int BALL_DIAMETER = 10;
        
        private Thread gameThread;
        private Random random;
        private Paddle paddle1;
        private Paddle paddle2;
        private Ball ball;
        
        PongPanel()
        {
            newPaddles();
            newBall();
            this.setPreferredSize(new Dimension(WIDTH,HEIGHT));
            this.setBounds(panelSize);
            this.setFocusable(true);
            this.addKeyListener(new AL());
            gameThread = new Thread(this);
            gameThread.start();
        }
    
        public void checkCollision()
        {
            // stops paddles at window edges
            if(paddle1.y <= 0){
                paddle1.y = 0;
            }
            if(paddle1.y >= (HEIGHT-PADDLE_HEIGHT)){
                paddle1.y = (HEIGHT-PADDLE_HEIGHT);
            }
            if(paddle2.y <= 0){
                paddle2.y = 0;
            }
            if(paddle2.y >= (HEIGHT-PADDLE_HEIGHT)){
                paddle2.y = (HEIGHT-PADDLE_HEIGHT);
            }
            // Bound off top and bottom of window edges
            if(ball.y <= 0){
                ball.setYDirection(-ball.yVelocity);
            }
            if(ball.y >= (HEIGHT-BALL_DIAMETER))
            {
                ball.setYDirection(-ball.yVelocity);
            }
            // bounces ball off paddles
            if(ball.intersects(paddle1)){
                ball.setXDirection(-ball.xVelocity);
                ball.setYDirection(ball.yVelocity);
            }
            if(ball.intersects(paddle2)){
                ball.setXDirection(-ball.xVelocity);
                ball.setYDirection(ball.yVelocity);
            }
            
            // give a player point and create new ball
            if(ball.x <= 0){
                score2 +=10;
                newPaddles();
                newBall();
                setStartFlag(false);
            }
            if(ball.x >= (WIDTH-BALL_DIAMETER)){
                score1 += 10;
                newPaddles();
                newBall();
                setStartFlag(false);
            }
            updateScore();
        }
        @Override
        public void run()
        {
            long lastTime = System.nanoTime();
            double amountOfTicks = 60;
            double ns = 1000000000 / amountOfTicks;
            double delta = 0;
            while(true)
            {
                long now = System.nanoTime();
                delta += (now - lastTime)/ns;
                lastTime = now;
//                System.out.println("Current ball x: " + ball.x);
//                System.out.println("Current ball x: " + ball.y);
                
                if(delta >=1)
                {
                    move();
                    checkCollision();
                    repaint();
                    delta--;
                }
                if(exitFlag)
                {
                    break;
                }
            }
        }
        public void newBall()
        {
            ball = new Ball((WIDTH/2)-(BALL_DIAMETER/2),(HEIGHT/2)-(BALL_DIAMETER/2),BALL_DIAMETER, BALL_DIAMETER);
        }
        
        public void newPaddles()
        {
            paddle1 = new Paddle(0,(HEIGHT/2)-(PADDLE_HEIGHT/2),PADDLE_WIDTH,PADDLE_HEIGHT,1);
            paddle2 = new Paddle(WIDTH-PADDLE_WIDTH,(HEIGHT/2)-(PADDLE_HEIGHT/2),PADDLE_WIDTH,PADDLE_HEIGHT,2);
        }
        
        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);
            draw(g);
        }
        public void draw(Graphics g)
        {
            this.paddle1.draw(g);
            this.paddle2.draw(g);
            this.ball.draw(g);
        }
        public void move(){
            if(startFlag)
            {
                paddle1.move();
                paddle2.move();
                ball.move();
            }
        }
        public class AL extends KeyAdapter
        {
            public void keyPressed(KeyEvent e)
            {
                if(startFlag == false)
                {
                    if(e.getKeyCode()==KeyEvent.VK_SPACE)
                    {
                        setStartFlag(true);
                        //System.out.println("SPACE");
                        return;
                    }
                    return;
                }
                paddle1.keyPressed(e);
                paddle2.keyPressed(e);
            }
            public void keyReleased(KeyEvent e)
            {
                paddle1.keyReleased(e);
                paddle2.keyReleased(e);
            }
        }
    }

    private class Paddle extends Rectangle
    {
        private int id;
        private int yVelocity;
        private int speed = 10;
    
        Paddle(int x, int y, int paddle_width, int paddle_height, int id)
        {
            super(x,y,paddle_width,paddle_height);
            this.id = id;
        }
        
        public void keyPressed(KeyEvent e)
        {
            switch(id){
                case 1:
                    if(e.getKeyCode() == KeyEvent.VK_W){
                        setYDirection(-speed);
                        move();
                    }
                    if(e.getKeyCode() == KeyEvent.VK_S){
                        setYDirection(speed);
                        move();
                    }
                    break;
                case 2:
                    if(e.getKeyCode() == KeyEvent.VK_UP){
                        setYDirection(-speed);
                        move();
                    }
                    if(e.getKeyCode() == KeyEvent.VK_DOWN){
                        setYDirection(speed);
                        move();
                    }
                    break;
            }
        }
        public void keyReleased(KeyEvent e)
        {
            switch(id){
                case 1:
                    if(e.getKeyCode() == KeyEvent.VK_W){
                        setYDirection(0);
                        move();
                    }
                    if(e.getKeyCode() == KeyEvent.VK_S){
                        setYDirection(0);
                        move();
                    }
                    break;
                case 2:
                    if(e.getKeyCode() == KeyEvent.VK_UP){
                        setYDirection(0);
                        move();
                    }
                    if(e.getKeyCode() == KeyEvent.VK_DOWN){
                        setYDirection(0);
                        move();
                    }
                    break;
            }
        }
        public void setYDirection(int yDirection)
        {
            yVelocity = yDirection;
        }
        public void move()
        {
            y = y + yVelocity;
        }
        
        public void draw(Graphics g)
        {
            if(id == 1){
                g.setColor(Color.blue);
            }
            else{
                g.setColor(Color.red);
            }
            g.fillRect(x, y, width, height);
        }
    }
    
    private class Ball extends Rectangle
    {

        Random random;
        private int xVelocity;
        private int yVelocity;
        private int initialSpeed = 2;


        Ball(int x, int y, int width, int height)
        {
            super(x,y,width,height);
            random = new Random();

            int randomXDirection = random.nextInt(2);
            if(randomXDirection == 0){
                randomXDirection--;
            }
            setXDirection(randomXDirection*initialSpeed);

            int randomYDirection = random.nextInt(2);
            if(randomYDirection == 0){
                randomYDirection--;
            }
            setYDirection(randomXDirection*initialSpeed);
        }

        public void setXDirection(int randomXDirection)
        {
            xVelocity = randomXDirection;
        }

        public void setYDirection(int randomYDirection)
        {
            yVelocity = randomYDirection;
        }
        public void move()
        {
            x += xVelocity;
            y += yVelocity;
        }

        public void draw(Graphics g)
        {
            g.setColor(Color.white);
            g.fillOval(x, y, height, width);
        }
    }
}


